<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="botonOKalarma.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>